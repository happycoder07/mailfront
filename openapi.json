{
  "openapi": "3.0.0",
  "paths": {
    "/api/auth/login": {
      "post": {
        "operationId": "AuthController_login",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "summary": "User login",
        "tags": ["auth"]
      }
    },
    "/api/auth/register": {
      "post": {
        "operationId": "AuthController_register",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Registration successful"
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "User registration",
        "tags": ["auth"]
      }
    },
    "/api/auth/profile": {
      "get": {
        "operationId": "AuthController_getProfile",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Profile retrieved successfully"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get user profile",
        "tags": ["auth"]
      },
      "put": {
        "operationId": "AuthController_updateProfile",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePasswordDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Profile updated successfully"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update user profile",
        "tags": ["auth"]
      }
    },
    "/api/auth/logout": {
      "post": {
        "operationId": "AuthController_logout",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Logout successful"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "summary": "User logout",
        "tags": ["auth"]
      }
    },
    "/api/auth/users": {
      "get": {
        "operationId": "AuthController_getUsers",
        "parameters": [
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search term for email, first name, or last name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Users retrieved successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all users",
        "tags": ["auth"]
      }
    },
    "/api/auth/users/{id}": {
      "put": {
        "operationId": "AuthController_editUser",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "User ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditUserDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User edited successfully"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions"
          },
          "404": {
            "description": "User not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Edit user",
        "tags": ["auth"]
      },
      "delete": {
        "operationId": "AuthController_deleteUser",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "User ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User deleted successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions"
          },
          "404": {
            "description": "User not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete user",
        "tags": ["auth"]
      }
    },
    "/api/auth/roles": {
      "get": {
        "operationId": "AuthController_getRoles",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Roles retrieved successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all roles",
        "tags": ["auth"]
      }
    },
    "/api/monitoring/health": {
      "get": {
        "operationId": "MonitoringController_checkHealth",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "summary": "Check system health",
        "tags": ["Monitoring"]
      }
    },
    "/api/metrics": {
      "get": {
        "operationId": "PrometheusController_index",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": ["Prometheus"]
      }
    },
    "/api/mail": {
      "post": {
        "description": "Creates a new email with optional attachments and recipients",
        "operationId": "MailController_createEmail",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateEmailDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Email created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateEmailDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "cookie": []
          }
        ],
        "summary": "Create a new email",
        "tags": ["mail"]
      },
      "get": {
        "description": "Retrieves a paginated list of emails with optional filters",
        "operationId": "MailController_findAll",
        "parameters": [
          {
            "name": "startDate",
            "required": false,
            "in": "query",
            "description": "Start date for filtering emails",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "required": false,
            "in": "query",
            "description": "End date for filtering emails",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "required": false,
            "in": "query",
            "description": "Filter by sender email address",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "to",
            "required": false,
            "in": "query",
            "description": "Filter by recipient email address",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subject",
            "required": false,
            "in": "query",
            "description": "Filter by email subject",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Filter by email status",
            "schema": {
              "type": "string",
              "enum": ["PENDING", "APPROVED", "REJECTED", "SENT", "FAILED"]
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number (1-based)",
            "schema": {
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "Number of items per page",
            "schema": {
              "default": 10,
              "type": "number"
            }
          },
          {
            "description": "Page number (1-based)",
            "required": false,
            "name": "page",
            "in": "query",
            "schema": {
              "default": 1,
              "type": "number"
            }
          },
          {
            "description": "Number of items per page",
            "required": false,
            "name": "pageSize",
            "in": "query",
            "schema": {
              "default": 10,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns paginated list of emails",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedEmailResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "cookie": []
          }
        ],
        "summary": "Get all emails",
        "tags": ["mail"]
      }
    },
    "/api/mail/{id}": {
      "get": {
        "description": "Retrieves a specific email by its ID",
        "operationId": "MailController_getEmail",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Email ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Email found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateEmailDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Email not found"
          }
        },
        "security": [
          {
            "cookie": []
          }
        ],
        "summary": "Get email by ID",
        "tags": ["mail"]
      }
    },
    "/api/mail/{id}/approve": {
      "post": {
        "description": "Approves a pending email by its ID",
        "operationId": "MailController_approveEmail",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Email ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Email approved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateEmailDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Email not found"
          }
        },
        "security": [
          {
            "cookie": []
          }
        ],
        "summary": "Approve email",
        "tags": ["mail"]
      }
    },
    "/api/mail/{id}/reject": {
      "post": {
        "description": "Rejects a pending email by its ID with a reason",
        "operationId": "MailController_rejectEmail",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Email ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RejectEmailDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Email rejected successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateEmailDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Email not found"
          }
        },
        "security": [
          {
            "cookie": []
          }
        ],
        "summary": "Reject email",
        "tags": ["mail"]
      }
    },
    "/api/mail/{id}/sign": {
      "post": {
        "description": "Signs an email with PGP and approves it in one operation",
        "operationId": "MailController_signEmail",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Email ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Email signed and approved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateEmailDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Email not found"
          },
          "500": {
            "description": "PGP signing failed"
          }
        },
        "security": [
          {
            "cookie": []
          }
        ],
        "summary": "Sign and approve email",
        "tags": ["mail"]
      }
    },
    "/api/files/{key}": {
      "get": {
        "operationId": "MinioController_getFile",
        "parameters": [
          {
            "name": "key",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "cookie": []
          }
        ],
        "tags": ["Minio"]
      }
    },
    "/api/queue/size": {
      "get": {
        "operationId": "QueueController_getQueueSize",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Returns the current size of the email queue"
          }
        },
        "summary": "Get the current size of the email queue",
        "tags": ["Queue"]
      }
    },
    "/api/queue/items": {
      "get": {
        "operationId": "QueueController_getQueueItems",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Returns all items in the email queue"
          }
        },
        "summary": "Get all items in the email queue",
        "tags": ["Queue"]
      }
    },
    "/api/queue/process/{id}": {
      "post": {
        "operationId": "QueueController_processEmail",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Email processed successfully"
          }
        },
        "summary": "Manually process a specific email in the queue",
        "tags": ["Queue"]
      }
    }
  },
  "info": {
    "title": "Mail Manager API",
    "description": "API for managing emails and attachments",
    "version": "1.0",
    "contact": {}
  },
  "tags": [],
  "servers": [],
  "components": {
    "securitySchemes": {
      "cookie": {
        "type": "apiKey",
        "in": "cookie",
        "name": "jwt"
      }
    },
    "schemas": {
      "LoginDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "admin@example.com"
          },
          "password": {
            "type": "string",
            "example": "admin123"
          }
        },
        "required": ["email", "password"]
      },
      "RegisterDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "user@example.com"
          },
          "password": {
            "type": "string",
            "example": "password123"
          },
          "firstName": {
            "type": "string",
            "example": "John"
          },
          "lastName": {
            "type": "string",
            "example": "Doe"
          },
          "roleId": {
            "type": "number",
            "example": 1
          }
        },
        "required": ["email", "password", "firstName", "lastName", "roleId"]
      },
      "ChangePasswordDto": {
        "type": "object",
        "properties": {
          "currentPassword": {
            "type": "string",
            "example": "currentPassword123"
          },
          "newPassword": {
            "type": "string",
            "example": "newPassword123"
          }
        },
        "required": ["currentPassword", "newPassword"]
      },
      "EditUserDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "User email"
          },
          "firstName": {
            "type": "string",
            "description": "User first name"
          },
          "lastName": {
            "type": "string",
            "description": "User last name"
          },
          "roleId": {
            "type": "number",
            "description": "User role ID"
          }
        }
      },
      "RecipientDto": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "example": "recipient@example.com"
          },
          "type": {
            "type": "string",
            "enum": ["TO", "CC", "BCC"],
            "default": "TO"
          }
        },
        "required": ["address", "type"]
      },
      "CreateEmailDto": {
        "type": "object",
        "properties": {
          "from": {
            "type": "string",
            "example": "sender@example.com"
          },
          "recipients": {
            "example": [
              {
                "address": "recipient1@example.com",
                "type": "TO"
              },
              {
                "address": "recipient2@example.com",
                "type": "CC"
              }
            ],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RecipientDto"
            }
          },
          "subject": {
            "type": "string",
            "example": "Test Subject"
          },
          "content": {
            "type": "string",
            "example": "This is the email content"
          },
          "html": {
            "type": "string",
            "example": "\u003Cp\u003EThis is HTML content\u003C/p\u003E"
          },
          "attachments": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "filename": {
                  "type": "string"
                },
                "path": {
                  "type": "string"
                },
                "contentType": {
                  "type": "string"
                }
              }
            }
          }
        },
        "required": ["from", "recipients", "subject", "content"]
      },
      "AttachmentDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "example": 1,
            "description": "Unique identifier of the attachment"
          },
          "filename": {
            "type": "string",
            "example": "document.pdf",
            "description": "Original filename of the attachment"
          },
          "contentType": {
            "type": "string",
            "example": "application/pdf",
            "description": "MIME type of the attachment"
          },
          "size": {
            "type": "number",
            "example": 1024,
            "description": "Size of the attachment in bytes"
          },
          "minioKey": {
            "type": "string",
            "example": "attachments/123/document.pdf",
            "description": "Storage key in MinIO"
          },
          "emailId": {
            "type": "number",
            "example": 1,
            "description": "ID of the email this attachment belongs to"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "example": "2024-03-20T10:00:00Z",
            "description": "Timestamp when the attachment was created"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "example": "2024-03-20T10:00:00Z",
            "description": "Timestamp when the attachment was last updated"
          }
        },
        "required": [
          "id",
          "filename",
          "contentType",
          "size",
          "minioKey",
          "emailId",
          "createdAt",
          "updatedAt"
        ]
      },
      "EmailRecipientDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "example": 1,
            "description": "Unique identifier of the recipient"
          },
          "emailId": {
            "type": "number",
            "example": 1,
            "description": "ID of the email this recipient belongs to"
          },
          "address": {
            "type": "string",
            "example": "recipient@example.com",
            "description": "Email address of the recipient"
          },
          "type": {
            "type": "string",
            "enum": ["TO", "CC", "BCC"],
            "example": "TO",
            "description": "Type of recipient (TO, CC, BCC)"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "example": "2024-03-20T10:00:00Z",
            "description": "Timestamp when the recipient was added"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "example": "2024-03-20T10:00:00Z",
            "description": "Timestamp when the recipient was last updated"
          }
        },
        "required": ["id", "emailId", "address", "type", "createdAt", "updatedAt"]
      },
      "EmailResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "example": 1,
            "description": "Unique identifier of the email"
          },
          "from": {
            "type": "string",
            "example": "sender@example.com",
            "description": "Email address of the sender"
          },
          "subject": {
            "type": "string",
            "example": "Meeting Schedule",
            "description": "Subject of the email"
          },
          "content": {
            "type": "string",
            "example": "Please find the meeting schedule attached.",
            "description": "Content/body of the email"
          },
          "status": {
            "type": "string",
            "enum": ["PENDING", "APPROVED", "REJECTED", "SENT", "FAILED"],
            "example": "PENDING",
            "description": "Current status of the email"
          },
          "signedContent": {
            "type": "string",
            "example": "-----BEGIN PGP SIGNATURE-----\n...\n-----END PGP SIGNATURE-----",
            "description": "PGP signature of the email content if signed"
          },
          "rejectionReason": {
            "type": "string",
            "example": "Content violates policy",
            "description": "Reason for rejection if the email was rejected"
          },
          "approvedBy": {
            "type": "number",
            "example": 1,
            "description": "ID of the user who approved the email"
          },
          "approvedAt": {
            "format": "date-time",
            "type": "string",
            "example": "2024-03-20T10:00:00Z",
            "description": "Timestamp when the email was approved"
          },
          "rejectedBy": {
            "type": "number",
            "example": 1,
            "description": "ID of the user who rejected the email"
          },
          "rejectedAt": {
            "format": "date-time",
            "type": "string",
            "example": "2024-03-20T10:00:00Z",
            "description": "Timestamp when the email was rejected"
          },
          "attachments": {
            "description": "List of attachments in the email",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttachmentDto"
            }
          },
          "recipients": {
            "description": "List of recipients of the email",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmailRecipientDto"
            }
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "example": "2024-03-20T10:00:00Z",
            "description": "Timestamp when the email was created"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "example": "2024-03-20T10:00:00Z",
            "description": "Timestamp when the email was last updated"
          }
        },
        "required": [
          "id",
          "from",
          "subject",
          "content",
          "status",
          "attachments",
          "recipients",
          "createdAt",
          "updatedAt"
        ]
      },
      "PaginatedEmailResponseDto": {
        "type": "object",
        "properties": {
          "items": {
            "description": "Array of email objects for the current page",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmailResponseDto"
            }
          },
          "meta": {
            "type": "object",
            "description": "Pagination metadata",
            "properties": {
              "page": {
                "type": "number",
                "description": "Current page number",
                "example": 1
              },
              "pageSize": {
                "type": "number",
                "description": "Number of items per page",
                "example": 10
              },
              "totalItems": {
                "type": "number",
                "description": "Total number of items across all pages",
                "example": 100
              },
              "totalPages": {
                "type": "number",
                "description": "Total number of pages",
                "example": 10
              }
            }
          }
        },
        "required": ["items", "meta"]
      },
      "RejectEmailDto": {
        "type": "object",
        "properties": {
          "reason": {
            "type": "string",
            "example": "Email content violates policy",
            "description": "Reason for rejecting the email"
          }
        },
        "required": ["reason"]
      }
    }
  }
}
